#!/bin/bash
set -eE -o functrace

failure() {
  local lineno=$1
  local msg=$2
  echo "Failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

set -o pipefail

ENV_DOPPLER_FILENAME=".env.doppler"

set_password() {
  local _arg_project="${1}"
  local _arg_config="${2}"

  echo "[INFO] Download Doppler config ${_arg_config} from ${_arg_project} project"

  doppler secrets download --no-file --format env -p "${_arg_project}" -c "${_arg_config}" >> ${ENV_DOPPLER_FILENAME}.tmp

  echo "# Project: ${_arg_project} (${_arg_config})" >> ${ENV_DOPPLER_FILENAME}

  while IFS= read -r line
  do
    local _key
    _key=$(echo "${line}" | cut -d'=' -f1)

    local _value
    _value=$(echo "${line}" | cut -d'=' -f2)

    if [[ -z "${_key}" ]]; then
      continue
    fi

    if [[ "${_key}" == "DOPPLER_"* ]]; then
      continue
    fi

    echo "export ${_key}=${_value}" >> ${ENV_DOPPLER_FILENAME}
  done < ${ENV_DOPPLER_FILENAME}.tmp

  rm ${ENV_DOPPLER_FILENAME}.tmp
}

main() {
  echo "[INFO] Setting up environment"

  local _config=${1}
  local _with_global=${2:-false}

  if [[ -z "${_config}" ]]; then
    echo "[ERROR] Config is required"
    exit 1
  fi

  cd "${DEVBOX_PROJECT_ROOT}"

  doppler -v || (echo "Install doppler cli: https://docs.doppler.com/docs/install-cli" && exit 1)

  touch ".env"

  touch ".env.doppler"
  echo "# Autogenerated by doppler.sh" > ".env.doppler"

  if [[ "${_with_global}" == "true" ]]; then
    set_password "global" "organization"
  fi

  set_password "italiaopensource-com" "${_config}"
}

main "$@"
