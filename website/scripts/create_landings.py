import json
import os
import sys
import unicodedata

from snakemd import Document

BASEDIR = os.path.dirname(os.path.abspath(__file__).replace("scripts/", ""))


def normalizeFilename(name):
    return (
        "".join(
            c
            for c in unicodedata.normalize("NFD", name)
            if unicodedata.category(c) != "Mn"
        )
        .strip()
        .replace(" ", "-")
        .replace("/", "-")
        .lower()
    ).replace("---", "-")


def create_page(name, tags):
    def _seo(name: str, tags: list, description: str):
        seo_header = f"""---
title: {name} | Italia Open-Source
description: {description}
tags: {', '.join(tags[0:5])}
---
        """
        return seo_header

    description = f"{name.title()} landing page in italiaopensource.com."

    doc = Document()
    doc.add_block(_seo(name, tags, description))
    doc.add_heading(name.title())

    return doc


def add_website_content(doc, url: str = None):
    if url:
        doc.add_heading("Website", level=3)
        doc.add_block(url)


def add_company_content(doc, data):
    doc.add_paragraph(f"### {data['name']}").insert_link(
        data["name"], f"/companies/{normalizeFilename(data['name'])}"
    )
    doc.add_block(f"**Market**: {data['market']} ({data['type']})")
    if data["description"]:
        doc.add_block(f"**Description**: {data['description']}")
    if "foundation_year" in data:
        doc.add_block(f"**Created in**: {data['foundation_year']}")
    doc.add_block(" | ".join([f"`{tag}`" for tag in data["tags"]]).title())
    doc.add_horizontal_rule()


def add_digital_nomad_content(doc, data):
    doc.add_paragraph(f"### {data['name']}").insert_link(
        data["name"], f"/digital-nomads/{normalizeFilename(data['name'])}"
    )
    doc.add_block(f"**State**: {data['state_name']}")
    doc.add_block(f"**Internet Roaming**: {data['internet_roaming']}")
    if data["description"]:
        doc.add_block(f"**Description**: {data['description']}")
    doc.add_block(" | ".join([f"`{tag}`" for tag in data["tags"]]).title())
    doc.add_horizontal_rule()


def add_communities_content(doc, data):
    doc.add_paragraph(f"### {data['name']}").insert_link(
        data["name"], f"/communities/{normalizeFilename(data['name'])}"
    )
    doc.add_block(f"**Event Type**: {', '.join(data['events_type'])}")
    if data.get("description"):
        doc.add_block(f"**Description**: {data['description']}")
    doc.add_block(" | ".join([f"`{tag}`" for tag in data["tags"]]).title())
    doc.add_horizontal_rule()


def add_opensources_content(doc, data):
    doc.add_paragraph(f"### {data['name']}").insert_link(
        data["name"], f"/opensources/{normalizeFilename(data['name'])}"
    )
    doc.add_block(f"**Type**: {data['type']}")
    if data["description"]:
        doc.add_block(f"**Description**: {data['description']}")
    doc.add_block(" | ".join([f"`{tag}`" for tag in data["tags"]]).title())
    doc.add_block(
        f"<p align='right'>Last updated {data.get('autogenerated', {}).get('analytics', {}).get('updated_at', '')}</p>"
    )
    doc.add_horizontal_rule()


def get_data():
    api_endpoit = ["opensource", "companies", "communities", "digital-nomads"]
    data = {}

    for endpoint in api_endpoit:
        data_filepath = "/".join([BASEDIR, "database", f"{endpoint}.json"])
        with open(data_filepath, "r") as f:
            data[endpoint] = json.loads(f.read())

    return data


def main():
    data = get_data()

    os.chdir("/".join([BASEDIR, "src", "pages", "landings"]))

    doc = create_page(
        "Companies Landing", ["tech company", "open-source", "opensource"]
    )
    for item in data["companies"]["data"]:
        print(f"Creating {item['name']} in companies landing")
        add_company_content(doc, item)
    doc.dump("companies")

    doc = create_page(
        "Opensource Projects Landing",
        ["opensource projects", "open-source", "opensource"],
    )
    for item in data["opensource"]["data"]:
        print(f"Creating {item['name']} in opensources landing")
        add_opensources_content(doc, item)
    doc.dump("opensources")

    print(f"Creating communities landing")
    doc = create_page(
        "Communities Landing", ["tech community", "open-source", "opensource"]
    )
    for item in data["communities"]["data"]:
        print(f"Creating {item['name']} in communities landing")
        add_communities_content(doc, item)
    doc.dump("communities")

    print("Creating digital nomads landing")
    doc = create_page(
        "Digital Nomads Landing",
        ["digital nomads", "remote working", "open-source", "opensource"],
    )
    for item in data["digital-nomads"]["data"]:
        print(f"Creating {item['name']} in digital nomads landing")
        add_digital_nomad_content(doc, item)
    doc.dump("digital-nomads")


if __name__ == "__main__":
    sys.exit(main())
