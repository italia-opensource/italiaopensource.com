import json
import os
import sys
import unicodedata

from snakemd import Document

BASEDIR = os.path.dirname(os.path.abspath(__file__).replace("scripts/", ""))


def normalizeFilename(name):
    return (
        "".join(
            c
            for c in unicodedata.normalize("NFD", name)
            if unicodedata.category(c) != "Mn"
        )
        .strip()
        .replace(" ", "-")
        .replace("/", "-")
        .lower()
    ).replace("---", "-")


def create_page(data, endpoint):
    def _seo(name: str, tags: list, description: str):
        seo_header = f"""---
title: {name}
description: {description}
tags: {', '.join(tags[0:5])}
---
        """
        return seo_header

    def _title(partnership: bool):
        if partnership:
            return f"""import VerifiedIcon from '@mui/icons-material/Verified'
import Alert from '@mui/material/Alert';

# {name} <VerifiedIcon color="primary"/>
"""

        return f"# {name}"

    name = data["name"]
    tags = data["tags"]
    description = data.get("description")

    if description:
        description = description.replace('"', "'").replace(":", "")
    else:
        description = f"{name.title()} page in italiaopensource.com website."

    doc = Document()
    doc.add_block(_seo(name, tags, description))
    doc.add_block(_title(data["autogenerated"].get("partnership", False)))
    label_sponsor = ""
    if data["autogenerated"].get("partnership", False):
        label_sponsor += "![Community Partner](https://img.shields.io/static/v1?label=community&message=partner&color=blue) "
    doc.add_block(
        f"{label_sponsor}![GitHub Repo](https://img.shields.io/static/v1?label=category&message={endpoint}&color=green)"
    )
    doc.add_heading("Description", level=3)
    doc.add_block(description)
    doc.add_heading("Tags", level=3)

    doc.add_block(" | ".join([f"`{tag}`" for tag in tags]).title())

    return doc


def add_website_content(doc, url: str = None):
    if url:
        doc.add_heading("Website", level=3)
        doc.add_block(url)


def add_startups_content(doc, data):
    doc.add_heading("Info", level=3)
    doc.add_block(f"**Market**: {data['market']} ({data['type']})")
    if data.get("address"):
        doc.add_block(f"**Address**: {data['address']}")
    if data.get("foundation_year"):
        doc.add_block(f"**Created in**: {data['foundation_year']}")
    if tech_stack := data.get("tech_stack"):
        doc.add_heading("Tech Stack", level=3)
        doc.add_block(" | ".join([f"`{stack}`" for stack in tech_stack]).title())
    add_website_content(doc, data.get("site_url"))
    if data["autogenerated"].get("partnership"):
        doc.add_block(
            f"<Alert>{data['name']} è nostro {data['sponsor_level']} sponsor. Vuoi supportarci anche te? vai sulla pagina <a href='/partners/how-to-became-partners'>sponsor</a> </Alert><br></br>"
        )


def add_communities_content(doc, data):
    doc.add_heading("Event Type", level=3)
    doc.add_unordered_list(data["events_type"])
    doc.add_block(f"On {data['platform']} ({data['type']})")
    add_website_content(doc, data.get("url"))


def add_digital_nomads_content(doc, data):
    doc.add_heading("Info", level=3)
    doc.add_block(f"**State**: {data['state_name']}")
    doc.add_block(f"**Internet Roaming**: {data['internet_roaming']}")
    if data.get("daily_average_cost"):
        doc.add_block(f"**Daily averege cost**: {data['daily_average_cost']}€")
    doc.add_block(f"**Allowed Documents**")
    doc.add_unordered_list(data["required_documents"])
    if data.get("how_to_arrive"):
        doc.add_block(f"**How to Arrive**")
        doc.add_unordered_list(data["how_to_arrive"])
    doc.add_block(f"**How to move**")
    doc.add_unordered_list(data["how_to_move"])
    doc.add_heading("Reources", level=3)
    doc.add_unordered_list(data["resources"])
    doc.add_heading("Coworking", level=3)
    doc.add_unordered_list(data["coworking"])


def add_opensources_content(doc, data):
    def _repository(repository_platform, repository_url):
        element = ""

        if repository_platform == "bitbucket":
            path = "/".join(
                repository_url.replace("https://bitbucket.org/", "").split("/")[0:2]
            )
            element += (
                f"![GitHub Repo](https://img.shields.io/github/issues-raw/{path})<br />"
            )
            element += (
                f"![GitHub Repo](https://img.shields.io/github/pr-raw/{path})<br />"
            )

        if repository_platform == "github":
            path = "/".join(
                repository_url.replace("https://github.com/", "").split("/")[0:2]
            )
            element += f"![GitHub Repo](https://img.shields.io/github/stars/{path}?style=social)<br />"
            element += f"![GitHub Repo](https://img.shields.io/github/forks/{path}?style=social)<br />"
            element += f"![GitHub Repo](https://img.shields.io/github/v/tag/{path}?style=social)<br />"
            element += f"![GitHub Repo](https://img.shields.io/github/contributors/{path})<br />"
            element += (
                f"![GitHub Repo](https://img.shields.io/github/issues-pr/{path})<br />"
            )
            element += (
                f"![GitHub Repo](https://img.shields.io/github/issues/{path})<br />"
            )
            element += (
                f"![GitHub Repo](https://img.shields.io/github/license/{path})<br />"
            )
            element += f"![GitHub Repo](https://img.shields.io/github/last-commit/{path})<br />"

        if repository_platform == "gitlab":
            path = "/".join(
                repository_url.replace("https://gitlab.com/", "").split("/")[0:3]
            )
            print(repository_url.replace("https://gitlab.com", "").split("/"))
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/stars/{path}?style=social)<br />"
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/forks/{path}?style=social)<br />"
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/v/release/{path}?date_order_by=created_at&sort=date&style=social)<br />"
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/contributors/{path})<br />"
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/merge-requests/open/{path})<br />"
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/issues/open/{path})<br />"
            element += (
                f"![Gitlab Repo](https://img.shields.io/gitlab/license/{path})<br />"
            )
            element += f"![Gitlab Repo](https://img.shields.io/gitlab/last-commit/{path})<br />"

        return element

    doc.add_heading("Repository", level=3)
    doc.add_block(data["repository_url"])
    doc.add_block(_repository(data["repository_platform"], data["repository_url"]))

    add_website_content(doc, data.get("site_url"))


def main():
    api_endpoit = ["opensource", "startups", "communities", "digital-nomads"]

    for endpoint in api_endpoit:
        data_filepath = "/".join([BASEDIR, "database", f"{endpoint}.json"])
        with open(data_filepath, "r") as f:
            response = f.read()

        os.chdir(
            "/".join(
                [
                    BASEDIR,
                    "src",
                    "pages",
                    f"{endpoint}s" if endpoint == "opensource" else endpoint,
                ]
            )
        )

        for item in json.loads(response)["data"]:
            print(f"Creating {item['name']} in {endpoint}")

            doc = create_page(item, endpoint)

            if endpoint == "startups":
                add_startups_content(doc, item)

            if endpoint == "communities":
                add_communities_content(doc, item)

            if endpoint == "opensource":
                add_opensources_content(doc, item)

            if endpoint == "digital-nomads":
                add_digital_nomads_content(doc, item)

            doc.dump(normalizeFilename(item["name"]))


if __name__ == "__main__":
    sys.exit(main())
