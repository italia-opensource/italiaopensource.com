import 'primeicons/primeicons.css';
import 'primereact/resources/themes/lara-light-indigo/theme.css';
import 'primereact/resources/primereact.css';
import 'primeflex/primeflex.css';

import React from 'react';
import { FilterMatchMode, FilterOperator } from 'primereact/api';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { TableData } from './base';
import VerifiedIcon from '@mui/icons-material/Verified';

import mockDataJson from '../../../database/startups.json';

import { isMobile } from 'react-device-detect';

class StartupsTableData extends TableData {
  initFilterValues: { [key: string]: {} } = {
    global: { value: null, matchMode: FilterMatchMode.CONTAINS },
    name: {
      operator: FilterOperator.AND,
      constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }]
    },
    type: {
      operator: FilterOperator.AND,
      constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }]
    },
    market: {
      operator: FilterOperator.AND,
      constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }]
    },
    tags: {
      operator: FilterOperator.AND,
      constraints: [{ value: null, matchMode: FilterMatchMode.CONTAINS }]
    },
    foundation_year: {
      operator: FilterOperator.AND,
      constraints: [{ value: null, matchMode: FilterMatchMode.CONTAINS }]
    }
  };

  constructor() {
    super('startups', mockDataJson);
  }

  create(): JSX.Element {
    const nameBodyTemplate = (rowData) => {
      const link = '/startups/' + rowData.autogenerated.filename.replace('.json', '');
      if (rowData.autogenerated.partnership) {
        return (
          <React.Fragment>
            <VerifiedIcon fontSize="small" color="primary" /> <a href={link}>{rowData.name}</a>
          </React.Fragment>
        );
      }

      return (
        <React.Fragment>
          <a href={link}>{rowData.name} </a>
        </React.Fragment>
      );
    };

    const tagsBodyTemplate = (rowData) => {
      if (rowData.tags != undefined) {
        return rowData.tags.join(', ');
      }
      console.log('Error display: ' + rowData);
    };

    const header = this.renderHeader();

    return (
      <DataTable
        value={this.customers}
        paginator
        showGridlines
        className="p-datatable-customers"
        rows={20}
        dataKey="id"
        filters={this.filters}
        filterDisplay="menu"
        loading={this.loading}
        responsiveLayout="scroll"
        globalFilterFields={['name', 'market']}
        header={header}
        emptyMessage="No startups found."
        footer={this.renderFooterCopy('startup', '/contributors/startups')}
      >
        <Column
          alignHeader="center"
          field="name"
          header="Name"
          body={nameBodyTemplate}
          filter
          filterPlaceholder="Search by name"
        />
        <Column
          alignHeader="center"
          field="type"
          header="Type"
          filter
          filterPlaceholder="Search by type"
        />
        <Column
          alignHeader="center"
          hidden={isMobile ? true : false}
          field="market"
          header="Market"
          filter
          filterPlaceholder="Search by market"
        />
        <Column
          alignHeader="center"
          hidden={isMobile ? true : false}
          field="tags"
          header="Tags"
          filter
          filterPlaceholder="Search by tags"
          body={tagsBodyTemplate}
        />
        <Column
          alignHeader="center"
          hidden={isMobile ? true : false}
          field="foundation_year"
          header="Foundation Year"
          filter
          filterPlaceholder="Search foundation year"
        />
        <Column
          alignHeader="center"
          hidden={isMobile ? true : false}
          field="description"
          header="Description"
        />
      </DataTable>
    );
  }
}

export default function Table(): JSX.Element {
  return new StartupsTableData().create();
}
