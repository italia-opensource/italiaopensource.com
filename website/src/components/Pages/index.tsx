import React from 'react';
import Grid from '@mui/material/Unstable_Grid2';
import { Link, Typography } from '@mui/material';
import Chip from '@mui/material/Chip';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import LinkIcon from '@mui/icons-material/Link';
import StarOutlineIcon from '@mui/icons-material/StarOutline';
import ForkLeftIcon from '@mui/icons-material/ForkLeft';
import GavelIcon from '@mui/icons-material/Gavel';
import BugReportIcon from '@mui/icons-material/BugReport';
import Breadcrumbs from '@mui/material/Breadcrumbs';
import Alert from '@mui/material/Alert';
import CodeIcon from '@mui/icons-material/Code';

interface ProjectsPageProps {
    data: {
        name: string
        type: string
        tags: Array<string>
        description: string
        site_url: string
        repository_platform: string
        repository_url: string
        license: string
        meta?: any
        autogenerated?: any
    }
}

function titleCase(str: string) {
    return str
    .toLowerCase()
    .split(' ')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

function getRepositoryGitHub(data: any) {
    const forkUrl = data.repository_url + '/forks';
    const issuesUrl = data.repository_url + '/issues';
    const starsUrl = data.repository_url + '/stargazers';

    return (
        <Grid>
            <Typography component='h3' variant='h5' marginTop={3} marginBottom={1}>Repository</Typography>

            <Grid>
                    <Grid xs={6}>
                        <Button className='primary' href={starsUrl} target='_blank'><StarOutlineIcon /> {data.autogenerated.analytics.stargazers_count} Stars</Button>
                    </Grid>
                    <Grid xs={6}>
                        <Button className='primary' href={forkUrl} target='_blank'><ForkLeftIcon /> {data.autogenerated.analytics.forks_count} Forks</Button>
                    </Grid>
                    <Grid xs={6}>
                        <Button className='primary' href={issuesUrl} target='_blank'><BugReportIcon /> {data.autogenerated.analytics.open_issues_count} Open Issues</Button>
                    </Grid>
                    <Grid xs={6}>
                        <Button className='primary'><GavelIcon /> {data.autogenerated.meta.license} License</Button>
                    </Grid>
                    <Grid xs={6}>
                        <Button className='primary'><CodeIcon /> {data.autogenerated.analytics.language} is the most used language</Button>
                    </Grid>
            </Grid>
        </Grid>
    );
}

function getRepositoryHTML(data: any) {
    switch (data.repository_platform) {
        case "github":
            return getRepositoryGitHub(data);
        default:
            return null;
    }
}

export default function ProjectsPage(props: ProjectsPageProps) {

    return (
        <Grid container>

    <div role="presentation">
      <Breadcrumbs aria-label="breadcrumb">
        <Link underline="hover" color="inherit" href="/">
          Home
        </Link>
        <Link
          color="inherit"
          href="/opensources"
        >
          Projects
        </Link>
        <Typography sx={{ color: 'text.primary' }}>{props.data.name}</Typography>
      </Breadcrumbs>
    </div>
            <Grid xs={12}>
                {props.data.autogenerated?.meta?.archived ? <Alert severity="warning">WARN: This project is archived.</Alert> : null}

                <Typography variant='h2' component='h1'>{props.data.name}</Typography>
                <Typography component='h2' marginBottom={2}>{props.data.description}</Typography>


                <Link href={props.data.repository_url} className='primary' target="_blank" paddingRight={1}>
                    <Chip
                        label={titleCase(props.data.repository_platform)}
                        icon={<LinkIcon />}
                    />
                </Link>
                {props.data.site_url ? <Link href={props.data.site_url} className='primary' target="_blank">
                    <Chip
                        label="Website"
                        icon={<LinkIcon />}
                    />
                </Link> : null}


                {getRepositoryHTML(props.data)}

                <Typography component='h3' variant='h5' marginTop={3} marginBottom={1}>Tags</Typography>

                <ButtonGroup variant="text" aria-label="Tags group">
                    {props.data.tags.map((tag) => (
                        <Button className='primary'>{tag}</Button>
                    ))}
                </ButtonGroup>
            </Grid>
        </Grid>
    );
}
