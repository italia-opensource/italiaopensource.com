name: Tests

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKSPACE: production

jobs:
  test-data:
    name: Test
    runs-on: ubuntu-22.04
    if: ${{ github.head_ref != 'release-please--branches--main' }} # Skip release-please branch
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          cache: "pip"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "website/.nvmrc"
          cache-dependency-path: website/yarn.lock
          cache: "yarn"

      - name: Set Terraform 1.9
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9"

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: github-actions

      - name: Website tests
        timeout-minutes: 10
        run: |
          cd website
          yarn setup
          yarn mdx-checker
          yarn build

      - name: Code tests
        timeout-minutes: 10
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ROLE_NAME: ${{ secrets.AWS_ROLE_NAME }}
          VENV_DIR: .venv
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

          mkdir -pv ${VENV_DIR}
          python3 -m venv ${VENV_DIR}
          source .activate
          pip install -r requirements.txt
          pre-commit install
          pre-commit run --all-files

          cd infrastructure
          make setup

      - name: Infrastructure Plan
        working-directory: infrastructure
        id: plan
        env:
          AWS_TERRAFORM_STATE_BUCKET: ${{ secrets.AWS_TERRAFORM_STATE_BUCKET }}
        run: make plan ARGS="-no-color"
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
